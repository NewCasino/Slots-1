// Generated by CoffeeScript 1.6.3
(function() {
  var Slots,
    _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Slots = {};

  Slots.config = {
    targetFPS: 60,
    width: 500,
    height: 400,
    symbol: {
      src: 'symbols_sheet.png',
      width: 100,
      height: 100,
      probabilities: [0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9]
    },
    reel: {
      width: 100,
      height: 300,
      regX: 0,
      regY: 0,
      spinDuration: 0.4,
      spinDelay: 0.5,
      speed: 2000
    }
  };

  Slots.load = function() {
    var canvas, manifest;
    canvas = document.createElement('canvas');
    canvas.width = this.config.width;
    canvas.height = this.config.height;
    document.body.appendChild(canvas);
    this.stage = new createjs.Stage(canvas);
    manifest = [
      {
        id: 'symbols',
        src: this.config.symbol.src
      }
    ];
    this.loader = new createjs.LoadQueue(false);
    this.loader.addEventListener('complete', this.init);
    return this.loader.loadManifest(manifest);
  };

  Slots.init = function() {
    Slots.symbolBuilder = new Slots.SymbolBuilder;
    Slots.state = new Slots.State;
    createjs.Ticker.timingMod = createjs.Ticker.RAF_SYNCHED;
    createjs.Ticker.setFPS(Slots.config.targetFPS);
    return createjs.Ticker.addEventListener('tick', Slots.state.tick);
  };

  Slots.State = (function() {
    function State() {
      this.tick = __bind(this.tick, this);
      var i, _i;
      this.reels = [];
      for (i = _i = 0; _i <= 4; i = ++_i) {
        this.reels[i] = new Slots.Reel({
          position: i
        });
        Slots.stage.addChild(this.reels[i].container);
        this.reels[i].spin({
          values: [0, 0, 0]
        });
      }
    }

    State.prototype.tick = function(evt) {
      var deltaS;
      deltaS = evt.delta / 1000;
      this.reels.forEach(function(reel) {
        return reel.update(deltaS);
      });
      Slots.stage.update(evt);
    };

    return State;

  })();

  Slots.Reel = (function() {
    Reel.prototype.config = {};

    Reel.prototype.isSpinning = false;

    function Reel(opts) {
      var i, symbol, _i;
      _.extend(this.config, Slots.config.reel, opts);
      this.container = new createjs.Container;
      this.container.y = this.config.regY;
      this.container.x = this.config.position * this.config.width + this.config.regX;
      for (i = _i = 0; _i <= 3; i = ++_i) {
        symbol = Slots.symbolBuilder.newSprite();
        symbol.y = symbol.height * i;
        this.container.addChild(symbol);
      }
    }

    Reel.prototype.spin = function(opts) {
      this.values = opts.values.concat(Slots.symbolBuilder.spawnValue());
      this.isSpinning = true;
      this.isFinalPass = false;
      return this.timeSpinning = -this.config.position * this.config.spinDelay;
    };

    Reel.prototype.update = function(deltaS) {
      var deltaPixels, i, lastSymbol, symbol, threshhold, top, _i, _len, _ref;
      if (!this.isSpinning) {
        return;
      }
      this.timeSpinning += deltaS;
      this.isFinalPass = this.timeSpinning >= this.config.spinDuration;
      deltaPixels = this.config.speed * deltaS;
      top = this.container.children[0].y - deltaPixels;
      if (this.isFinalPass && this.values.length === 0) {
        if (top < 0) {
          top = 0;
          this.isSpinning = false;
        }
      } else {
        threshhold = -this.container.children[0].height;
        if (top <= threshhold) {
          top += this.container.children[0].height;
          this.container.removeChildAt(0);
          lastSymbol = _.last(this.container.children);
          if (this.isFinalPass) {
            symbol = Slots.symbolBuilder.newSprite(this.values.shift());
          } else {
            symbol = Slots.symbolBuilder.newSprite();
          }
          symbol.y = lastSymbol.y + lastSymbol.height;
          this.container.addChild(symbol);
        }
      }
      _ref = this.container.children;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        symbol = _ref[i];
        symbol.y = top + (i * symbol.height);
      }
    };

    return Reel;

  })();

  Slots.SymbolBuilder = (function() {
    SymbolBuilder.prototype.config = {};

    function SymbolBuilder(opts) {
      _.extend(this.config, Slots.config.symbol, opts);
      this.config.image = this.config.image || Slots.loader.getResult('symbols');
      this.config.numSymbols = Math.floor(this.config.image.height / this.config.height);
      this.config.numFramsPerSymbol = Math.floor(this.config.image.width / this.config.width);
    }

    SymbolBuilder.prototype.spawnValue = function() {
      return _.shuffle(_.clone(this.config.probabilities))[0];
    };

    SymbolBuilder.prototype.newSprite = function(value) {
      var firstFrame, lastFrame, sheet, sprite, _i, _j, _ref, _ref1, _results, _results1;
      if (value == null) {
        value = this.spawnValue();
      }
      firstFrame = value * this.config.numFramsPerSymbol;
      lastFrame = (value + 1) * this.config.numFramsPerSymbol - 1;
      sheet = new createjs.SpriteSheet({
        images: [this.config.image],
        frames: {
          width: this.config.width,
          height: this.config.height,
          count: this.config.numSymbols * this.config.numFramsPerSymbol
        },
        animations: {
          "static": firstFrame,
          flash: {
            frames: (function() {
              _results1 = [];
              for (var _j = firstFrame; firstFrame <= lastFrame ? _j <= lastFrame : _j >= lastFrame; firstFrame <= lastFrame ? _j++ : _j--){ _results1.push(_j); }
              return _results1;
            }).apply(this).concat((function() {
              _results = [];
              for (var _i = _ref = lastFrame - 1, _ref1 = firstFrame + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this))
          }
        }
      });
      sprite = new createjs.Sprite(sheet, 'static');
      sprite.framerate = 30;
      sprite.width = this.config.width;
      sprite.height = this.config.height;
      return sprite;
    };

    return SymbolBuilder;

  })();

  Slots.load();

}).call(this);
